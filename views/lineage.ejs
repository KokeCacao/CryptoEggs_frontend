<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8">
    <!-- from: https://stackoverflow.com/questions/15000341/how-to-display-a-binary-search-tree-using-css-html-and-a-bit-of-javascript -->
    <style>
.tree ul {
    padding-top: 20px; position: relative;
    
    transition: all 0.5s;
    -webkit-transition: all 0.5s;
    -moz-transition: all 0.5s;
}

.tree li, .tree li:first-child, li:last-child {
    float: left; text-align: center;
    list-style-type: none;
    position: relative;
    padding: 20px 5px 0 5px;
    
    transition: all 0.5s;
    -webkit-transition: all 0.5s;
    -moz-transition: all 0.5s;
}

.tree li::before, .tree li::after{
    content: '';
    position: absolute; top: 0; right: 50%;
    border-top: 1px solid #ccc;
    width: 50%; height: 20px;
}
.tree li::after{
    right: auto; left: 50%;
    border-left: 1px solid #ccc;
}

.tree li:only-child::after, .tree li:only-child::before {
    display: none;
}

.tree li:only-child{ padding-top: 0;}

.tree li:first-child::before, .tree li:last-child::after{
    border: 0 none;
}
.tree li:last-child::before{
    border-right: 1px solid #ccc;
    border-radius: 0 5px 0 0;
    -webkit-border-radius: 0 5px 0 0;
    -moz-border-radius: 0 5px 0 0;
}
.tree li:first-child::after{
    border-radius: 5px 0 0 0;
    -webkit-border-radius: 5px 0 0 0;
    -moz-border-radius: 5px 0 0 0;
}
.tree ul ul::before{
    content: '';
    position: absolute; top: 0; left: 50%;
    border-left: 1px solid #ccc;
    width: 0; height: 20px;
}
.tree li div{
    border: 1px solid #ccc;
    padding: 5px 10px;
    text-decoration: none;
    color: #666;
    font-family: arial, verdana, tahoma;
    font-size: 11px;
    display: inline-block;
    
    border-radius: 5px;
    -webkit-border-radius: 5px;
    -moz-border-radius: 5px;
    
    transition: all 0.5s;
    -webkit-transition: all 0.5s;
    -moz-transition: all 0.5s;
}
.tree li div:hover, .tree li div:hover+ul li div {
    background: #c8e4f8; color: #000; border: 1px solid #94a0b4;
}
.tree li div:hover+ul li::after, 
.tree li div:hover+ul li::before, 
.tree li div:hover+ul::before, 
.tree li div:hover+ul ul::before{
    border-color:  #94a0b4;
}
    </style>
    <script
      src="https://cdn.ethers.io/lib/ethers-5.2.umd.min.js"
      type="application/javascript"
    ></script>
    <link
      rel="stylesheet"
      href="https://kokecacao.me/static/./css/BrowneUI.css"
    />
    <script>
      const contractAddress = "<%= contractAddress %>";
      const eggId = "<%= eggId %>";

      // prettier-ignore
      const contractJson = <%- contractJson %>;

      const abi = contractJson.abi;
      let provider;
      let address = 0;

      let loaded = false;

      function displayableHex(a) {
        let str = `${a}`;
        return `${str.substring(0, 4)}...${str.slice(-4)}`;
      }

      function time() {
        const now = new Date();
        const utcMilllisecondsSinceEpoch = now.getTime();
        const utcSecondsSinceEpoch = Math.round(utcMilllisecondsSinceEpoch / 1000);
        return utcSecondsSinceEpoch;
      }

      const cyrb53 = function(str, seed = 0) {
        let h1 = 0xdeadbeef ^ seed, h2 = 0x41c6ce57 ^ seed;
        for (let i = 0, ch; i < str.length; i++) {
            ch = str.charCodeAt(i);
            h1 = Math.imul(h1 ^ ch, 2654435761);
            h2 = Math.imul(h2 ^ ch, 1597334677);
        }
        h1 = Math.imul(h1 ^ (h1>>>16), 2246822507) ^ Math.imul(h2 ^ (h2>>>13), 3266489909);
        h2 = Math.imul(h2 ^ (h2>>>16), 2246822507) ^ Math.imul(h1 ^ (h1>>>13), 3266489909);
        return 4294967296 * (2097151 & h2) + (h1>>>0);
      };

      function dnaToId(dna, mod=256) {
        return cyrb53(dna) % mod;
      }

      function getEggImg(dna) {
        return `${window.location.origin}/static/eggs/${dnaToId(dna)}.png`;
      }

      function getMonImg(dna) {
        return `${window.location.origin}/static/mons/${dnaToId(dna)}.png`;
      }

      function getImg(type, dna) {
        if (type == 'egg') return getEggImg(dna);
        else return getMonImg(dna);
      }

      function CryptoEggsOnLoad() {
        // wait for ethers.js to load
        if (typeof ethers === "undefined") {
          console.log("ethers.js undefined, keep trying...");
          setTimeout(onLoad2CH3, 10);
          return;
        }
        if (loaded) return;
        loaded = true;
        console.log("ethers.js loaded");
        // load Web3
        if (provider === undefined) provider = new ethers.providers.Web3Provider(window.ethereum, "any");
        // load account
        CyrptoEggsConnectAccount(() => {
          lineage(eggId);
        }, () => console.log("cannot load account"));
      }

      function CyrptoEggsConnectAccount(successCallback, failureCallback) {
        (provider.send("eth_requestAccounts", [])).then((accounts) => {
          console.log(`Accounts: ${accounts}; Selecting the first account ${accounts[0]}`);
          address = accounts[0];
          successCallback();
        }, (errno) => {
          console.log(`Error ${errno.code}: ${errno.message}`);
          failureCallback();
        });
      }

      function createLineage(root, eggId) { // root must be a li
        getEggInstance(eggId, (eggInstance) => {
          if (eggInstance.father != 0 && eggInstance.mother != 0) {
            root.appendChild(getEggLinageBadge(eggId, eggInstance));

            let ul = document.createElement('ul');
            let lil = document.createElement('li');
            let lir = document.createElement('li');
            createLineage(lil, eggInstance.father);
            createLineage(lir, eggInstance.mother);
            ul.appendChild(lil);
            ul.appendChild(lir);
            root.appendChild(ul);
          } else {
            root.appendChild(getEggLinageBadge(eggId, eggInstance));
          }
        }, () => {});
      }
      function lineage(eggId) {
        const div = document.getElementById('tree');
        const ul = document.createElement('ul')
        const li = document.createElement('li')
        ul.appendChild(li);
        createLineage(li, eggId);
        div.appendChild(ul);
        return ul;
      }
      function getEggInstance(eggId, successCallback, failureCallback) {
        if (address == 0) {
          successCallback(undefined);
        }
        console.log(`Getting Lineage Badge for ${eggId}`);
          const contract = new ethers.Contract(contractAddress, abi, provider);
          contract.eggToEggInstance(eggId).then((eggInstance) => {
            console.log(`Successful Got Egg Instance: ${eggId}`);
            successCallback(eggInstance);
          }, (errno) => {
            console.log(`Error ${errno.code}: ${errno.message}`);
            failureCallback();
        });
      }
      function getEggLinageBadge(eggId, eggInstance) {
        const div = document.createElement('div');
        const txt = document.createTextNode(displayableHex(eggId));
        
        let a_img = document.createElement('a');
          a_img.setAttribute('href', "");
            let img = document.createElement('img');

            let adult = eggInstance.frozenTime > 0 ? (eggInstance.hatchTime < eggInstance.frozenTime) : (time() > eggInstance.hatchTime);
            let type = adult ? 'adult' : 'egg';
            img.src = getImg(type, `${eggInstance.id}`)

            img.title = eggId;
            a_img.appendChild(img);
        div.appendChild(a_img);
        div.appendChild(txt);

        return div;
      }
      
      CryptoEggsOnLoad();
    </script>
  </head>

  <body onload="">
    <div class="container">
      <div align="center">
        <h1><%= title %></h1>
        <p>
          Breed your own Cryptomon â€” [2021/03/18, Alpha]
          <span class="typing">_</span>
        </p>
      </div>
      <div id="tree" class="tree">
        <!-- will add automatically -->
      </div>
    </div>
  </body>
</html>
