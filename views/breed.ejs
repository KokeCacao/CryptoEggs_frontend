<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8">
    <script
      src="https://cdn.ethers.io/lib/ethers-5.2.umd.min.js"
      type="application/javascript"
    ></script>
    <link
      rel="stylesheet"
      href="https://kokecacao.me/static/./css/BrowneUI.css"
    />
    <script>
      const contractAddress = "<%= contractAddress %>";
      const eggId = "<%= eggId %>";

      // prettier-ignore
      const contractJson = <%- contractJson %>;

      const abi = contractJson.abi;
      let provider;
      let address = 0;

      let loaded = false;

      function displayableHex(a) {
        let str = `${a}`;
        return `${str.substring(0, 4)}...${str.slice(-4)}`;
      }

      function time() {
        const now = new Date();
        const utcMilllisecondsSinceEpoch = now.getTime();
        const utcSecondsSinceEpoch = Math.round(utcMilllisecondsSinceEpoch / 1000);
        return utcSecondsSinceEpoch;
      }

      const cyrb53 = function(str, seed = 0) {
        let h1 = 0xdeadbeef ^ seed, h2 = 0x41c6ce57 ^ seed;
        for (let i = 0, ch; i < str.length; i++) {
            ch = str.charCodeAt(i);
            h1 = Math.imul(h1 ^ ch, 2654435761);
            h2 = Math.imul(h2 ^ ch, 1597334677);
        }
        h1 = Math.imul(h1 ^ (h1>>>16), 2246822507) ^ Math.imul(h2 ^ (h2>>>13), 3266489909);
        h2 = Math.imul(h2 ^ (h2>>>16), 2246822507) ^ Math.imul(h1 ^ (h1>>>13), 3266489909);
        return 4294967296 * (2097151 & h2) + (h1>>>0);
      };

      function CryptoEggsOnLoad() {
        // wait for ethers.js to load
        if (typeof ethers === "undefined") {
          console.log("ethers.js undefined, keep trying...");
          setTimeout(onLoad2CH3, 10);
          return;
        }
        if (loaded) return;
        loaded = true;
        console.log("ethers.js loaded");
        // load Web3
        if (provider === undefined) provider = new ethers.providers.Web3Provider(window.ethereum, "any");
        // load account
        CyrptoEggsConnectAccount(() => {
          CryptoEggsGetEgg(address, () => {
            console.log("Loading Inventory Success");
          }, () => {});
        }, () => console.log("cannot load account"));
      }

      function CyrptoEggsConnectAccount(successCallback, failureCallback) {
        (provider.send("eth_requestAccounts", [])).then((accounts) => {
          console.log(`Accounts: ${accounts}; Selecting the first account ${accounts[0]}`);
          address = accounts[0];
          successCallback();
        }, (errno) => {
          console.log(`Error ${errno.code}: ${errno.message}`);
          failureCallback();
        });
      }

      function CryptoEggsGetEgg(address, successCallback, failureCallback) {
        if (address == 0) {
          console.log(`Invalid Address = 0x00`);
          failureCallback();
          return;
        }
        console.log(`Loading Your Inventory for ${address}`);
          const contract = new ethers.Contract(contractAddress, abi, provider);
          contract.ownerCryptomonCount(address).then((eggCount) => {
            console.log(`You have ${eggCount} many cryptomons`);
            for (let i = 0; i < eggCount; i++) {
              contract.ownerToCryptomons(address, i).then((id) => {
                contract.eggToEggInstance(id).then((eggInstance) => {
                  let adult = eggInstance.frozenTime > 0 ? (eggInstance.hatchTime < eggInstance.frozenTime) : (time() > eggInstance.hatchTime);
                  let type = adult ? 'adult' : 'egg';
                  if (eggInstance.id != eggId && adult) {
                    console.log(`Adding Egg to Inventory: ${eggInstance.id}`);
                    
                    
                    addRow(eggInstance.id, eggInstance.name, type, eggInstance.frozenTime > 0, !eggInstance.alive, getImg(type, `${eggInstance.id}`), '', `breed("${eggId}", "${eggInstance.id}")`);
                  }
                })
              }, (errno) => {
                console.log(`Error ${errno.code}: ${errno.message}`);
                failureCallback();
              });
            }
            successCallback();
          }, (errno) => {
              console.log(`Error ${errno.code}: ${errno.message}`);
              failureCallback();
            }
          );
      }

      function addRow(dna, name, type, frozen, dead, imgUrl, dnaUrl, breedFunction) {
        let list = document.getElementById('inventory'); 
        list.appendChild(getRow(displayableHex(dna), name, type, frozen, dead, imgUrl, dnaUrl, breedFunction));
      }

      function dnaToId(dna, mod=256) {
        return cyrb53(dna) % mod;
      }

      function getEggImg(dna) {
        return `${window.location.origin}/static/eggs/${dnaToId(dna)}.png`;
      }

      function getMonImg(dna) {
        return `${window.location.origin}/static/mons/${dnaToId(dna)}.png`;
      }

      function getImg(type, dna) {
        if (type == 'egg') return getEggImg(dna);
        else return getMonImg(dna);
      }

      function getRow(dna, name, type, frozen, dead, imgUrl, dnaUrl, breedFunction) {
        if (imgUrl == undefined) imgUrl = getImg(type, dna);
        // <tr>
        //     <td>
        //       <a href=""
        //         ><img
        //           id="display"
        //           style="opacity: 1"
        //           src="https://s.dcave.net/cache/images/8/8itcaf.gif"
        //       /></a>
        //     </td>

        //     <td><a href="">xxxx</a></td>
        //     <td>Egg</td>
        //     <td><a href="">View Lineage</a></td>
        // </tr>
        let tr = document.createElement("tr");

        let td_img = document.createElement("td");
          var a_img = document.createElement('a');
          a_img.setAttribute('href', "");
            let td_a_img = document.createElement('img');
            td_a_img.src = imgUrl;
            td_a_img.title = type;
            a_img.appendChild(td_a_img);
          td_img.appendChild(a_img);

        let td_dna = document.createElement("td");
        let a_dna = document.createElement('a');
        a_dna.setAttribute('href', dnaUrl);
        a_dna.appendChild(document.createTextNode(dna));
        td_dna.appendChild(a_dna);

        let td_name = document.createElement("td");
        td_name.innerHTML = `${type}${frozen ? '(❄)' : (dead ? '(💀)' : '')}`;

        let td_breed = document.createElement("td");
        let a_breed = document.createElement('a');
        a_breed.setAttribute('class', "btn");
        a_breed.setAttribute('onclick', breedFunction);
        a_breed.appendChild(document.createTextNode('Breed'));
        td_breed.appendChild(a_breed);


        tr.appendChild(td_img);
        tr.appendChild(td_dna);
        tr.appendChild(td_name);
        tr.appendChild(td_breed);
        return tr;
      }

      function CryptoEggsBreed(father, mother, successCallback, failureCallback) {
        // Connect to Metamask
        (provider.send("eth_requestAccounts", [])).then((accounts) => {
          console.log(`Accounts: ${accounts}; Selecting the first account...`);
          (provider.getBalance(accounts[0])).then((balance) => {
            console.log(`Accounts: ${accounts[0]}; Balance: ${balance}`);
            if (balance == 0) {
              console.log("You need to have balance to use this extension.")
              // TODO: play mode
              failureCallback();
              return;
            }
            // Initialize Contract
            const contract = new ethers.Contract(contractAddress, abi, provider.getSigner());
            contract.reproduce(father, mother).then((transaction) => {
              console.log(`Transaction sent, waiting for confirmation...`);
              transaction.wait(1).then((confirm) => {
                console.log(confirm);
                console.log(`Transaction Confirmed!`);
              });
              successCallback();
            }, (errno) => {
              console.log(`Error ${errno.code}: ${errno.message}`);
              failureCallback();
            });
          });
        }, (errno) => {
          console.log(`Error ${errno.code}: ${errno.message}`);
          failureCallback();
        });
      }

      function breed(from, to) {
        console.log(`Breeding: ${from.toLocaleString('fullwide', {useGrouping:false})} with ${to.toLocaleString('fullwide', {useGrouping:false})}`);
        // TODO: differentiate father mother
        CryptoEggsBreed(from, to, () => {
          console.log("breeding success");
        }, () => {
          console.log("breeding failed");
        })
      }

      CryptoEggsOnLoad();
    </script>
  </head>

  <body onload="">
    <div class="container">
      <div align="center">
        <h1><%= title %></h1>
        <p>
          Breed your own Cryptomon — [2021/03/18, Alpha]
          <span class="typing">_</span>
        </p>
      </div>

      <table style="width: 100%">
        <thead>
          <tr>
            <th>Inventory</th>
            <th>DNA</th>
            <th>Type</th>
            <th>Breed</th>
          </tr>
        </thead>
        <tbody id="inventory">
        </tbody>
      </table>

    </div>
  </body>
</html>
