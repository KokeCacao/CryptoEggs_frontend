<!DOCTYPE html>
<html lang="en">

<head>
  <script src="https://cdn.ethers.io/lib/ethers-5.2.umd.min.js" type="application/javascript"></script>
  <link rel="stylesheet" href="https://kokecacao.me/static/./css/BrowneUI.css">
  <script>
    const contractAddress = "<%= contractAddress %>";
    const contractJson = <%- contractJson %>;
    let provider;
    let signer;
    let metamask = true;

    function displayableHex(a) {
      let str = `${a}`;
      return `${str.substring(0, 4)}...${str.slice(-4)}`;
    }

    async function connectToMetamaskRPC() {
      // for testing only
      provider = new ethers.providers.Web3Provider(window.ethereum, "any");
      // Prompt user for account connections
      await provider.send("eth_requestAccounts", []);
      signer = provider.getSigner();
      const acc = await signer.getAddress();
      console.log("Account:", acc);
      document.getElementById("account").innerHTML = `Your Account: ${acc}`;
    }

    async function connectToRemoteRPC(url = "http://yukisa.wifi.local.cmu.edu:8545") {
      provider = new ethers.providers.JsonRpcProvider(url);
      // Prompt user for account connections
      signer = provider.getSigner();
      const acc = await signer.getAddress();
      console.log("Account:", acc);
      document.getElementById("account").innerHTML = `Your Account: ${acc}`;
    }

    async function connectToRPC(metamask) {
      if (metamask) connectToMetamaskRPC();
      else connectToRemoteRPC();
    }

    async function getEggs() {
      if (window.ethereum !== undefined) {
        if (signer === undefined) await connectToRPC(metamask);
        const contract = new ethers.Contract(contractAddress, contractJson.abi, provider);
        try {
          const transaction = await contract.getOwnerEgg(signer.getAddress());
          console.log(transaction);
          if (transaction.eq(ethers.BigNumber.from(0))) {
            document.getElementById("display").style.opacity = "0.0";
            document.getElementById("announcement").innerHTML = `You don't have any egg yet!`;
          } else {
            document.getElementById("display").style.opacity = "1.0";
            document.getElementById("announcement").innerHTML = `Your EggId: ${displayableHex(transaction)}`;
          }
          // const decimals = 0;
          // console.log(ethers.utils.formatUnits(transaction, decimals));
        } catch (error) {
          console.log(error);
          document.getElementById("announcement").innerHTML = error;
        }
      }
    }

    async function claimEgg() {
      if (window.ethereum !== undefined) {
        if (signer === undefined) await connectToRPC(metamask);
        const contract = new ethers.Contract(contractAddress, contractJson.abi, signer);
        try {
          const transaction = await contract.claimEgg();
          await transaction.wait();
          await getEggs();
          document.getElementById("announcement").innerHTML = "Claim Egg Successful!";
        } catch (error) {
          if (error.code === 4001) {
            console.log("User denied signature");
            document.getElementById("announcement").innerHTML = "User denied signature";
          } else {
            console.log(error);
            document.getElementById("announcement").innerHTML = error;
          }
        }
      }
    }
  </script>
</head>

<body onload="">
  <div class="container">
    <div align="center">
      <h1>
        <%= title %>
      </h1>
      <p>Breed your own Cryptomon â€” [2021/03/18, Alpha] <span class="typing">_</span></p>
    </div>

    <div align="center">
      <img id="display" style="opacity:0.1"
        src="https://lh3.googleusercontent.com/IFXvIHR35yZZH9YwbNnbhLr4X_eQCzVaCH9Xm1ExmJtoixkXVQwVGpcvZFub717WVTrVRyFq1mBe5fVsHKdQrZFayP0B3ox8scXQSu0=w600">
      <!-- <a class="btn" onclick="metamask = false;">setDebugMode</a> -->
    </div>
    <div align="center">
      <a class="btn" onclick="connectToRPC(metamask)">connectToMetamask</a>
      <a class="btn" onclick="getEggs()">getEggs</a>
      <a class="btn" onclick="claimEgg()">claimEgg</a>
    </div>
    <div align="center">
      <p id="account">Your are not logged in</p>
      <p id="announcement"></p>

      <figure>
        <img id="display" data-zoom-image style="opacity:1; max-width: 100%;" src="./static/tutorial_00.png">
      </figure>
      <figure>
        <img id="display" data-zoom-image style="opacity:1; max-width: 100%;" src="./static/tutorial_01.png">
      </figure>

      <p>
        Account #1: 0x70997970c51812dc3a010c7d01b50e0d17dc79c8 (10000 ETH)<br>
        Private Key: 0x59c6995e998f97a5a0044966f0945389dc9e86dae88c7a8412f4603b6b78690d
      </p>

      <p>
        Account #2: 0x3c44cdddb6a900fa2b585dd299e03d12fa4293bc (10000 ETH)<br>
        Private Key: 0x5de4111afa1a4b94908f83103eb1f1706367c2e68ca870fc3fb9a804cdab365a
      </p>

      <p>
        Account #3: 0x90f79bf6eb2c4f870365e785982e1f101e93b906 (10000 ETH)<br>
        Private Key: 0x7c852118294e51e653712a81e05800f419141751be58f605c371e15141b007a6
      </p>

      <p>
        Account #4: 0x15d34aaf54267db7d7c367839aaf71a00a2c6a65 (10000 ETH)<br>
        Private Key: 0x47e179ec197488593b187f80a00eb0da91f1b9d0b13f8733639f19c30a34926a
      </p>

      <p>
        Account #5: 0x9965507d1a55bcc2695c58ba16fb37d819b0a4dc (10000 ETH)<br>
        Private Key: 0x8b3a350cf5c34c9194ca85829a2df0ec3153be0318b5e2d3348e872092edffba
      </p>

      <p>
        Account #6: 0x976ea74026e726554db657fa54763abd0c3a0aa9 (10000 ETH)<br>
        Private Key: 0x92db14e403b83dfe3df233f83dfa3a0d7096f21ca9b0d6d6b8d88b2b4ec1564e
      </p>

      <p>
        Account #7: 0x14dc79964da2c08b23698b3d3cc7ca32193d9955 (10000 ETH)<br>
        Private Key: 0x4bbbf85ce3377467afe5d46f804f221813b2bb87f24d81f60f1fcdbf7cbf4356
      </p>

      <p>
        Account #8: 0x23618e81e3f5cdf7f54c3d65f7fbc0abf5b21e8f (10000 ETH)<br>
        Private Key: 0xdbda1821b80551c9d65939329250298aa3472ba22feea921c0cf5d620ea67b97
      </p>

      <p>
        Account #9: 0xa0ee7a142d267c1f36714e4a8f75612f20a79720 (10000 ETH)<br>
        Private Key: 0x2a871d0798f97d79848a013d4936a73bf4cc922c825d33c1cf7073dff6d409c6
      </p>

      <p>
        Account #10: 0xbcd4042de499d14e55001ccbb24a551f3b954096 (10000 ETH)<br>
        Private Key: 0xf214f2b2cd398c806f84e317254e0f0b801d0643303237d97a22a48e01628897
      </p>

      <p>
        Account #11: 0x71be63f3384f5fb98995898a86b02fb2426c5788 (10000 ETH)<br>
        Private Key: 0x701b615bbdfb9de65240bc28bd21bbc0d996645a3dd57e7b12bc2bdf6f192c82
      </p>

      <p>
        Account #12: 0xfabb0ac9d68b0b445fb7357272ff202c5651694a (10000 ETH)<br>
        Private Key: 0xa267530f49f8280200edf313ee7af6b827f2a8bce2897751d06a843f644967b1
      </p>

      <p>
        Account #13: 0x1cbd3b2770909d4e10f157cabc84c7264073c9ec (10000 ETH)<br>
        Private Key: 0x47c99abed3324a2707c28affff1267e45918ec8c3f20b8aa892e8b065d2942dd
      </p>

      <p>
        Account #14: 0xdf3e18d64bc6a983f673ab319ccae4f1a57c7097 (10000 ETH)<br>
        Private Key: 0xc526ee95bf44d8fc405a158bb884d9d1238d99f0612e9f33d006bb0789009aaa
      </p>

      <p>
        Account #15: 0xcd3b766ccdd6ae721141f452c550ca635964ce71 (10000 ETH)<br>
        Private Key: 0x8166f546bab6da521a8369cab06c5d2b9e46670292d85c875ee9ec20e84ffb61
      </p>

      <p>
        Account #16: 0x2546bcd3c84621e976d8185a91a922ae77ecec30 (10000 ETH)<br>
        Private Key: 0xea6c44ac03bff858b476bba40716402b03e41b8e97e276d1baec7c37d42484a0
      </p>

      <p>
        Account #17: 0xbda5747bfd65f08deb54cb465eb87d40e51b197e (10000 ETH)<br>
        Private Key: 0x689af8efa8c651a91ad287602527f3af2fe9f6501a7ac4b061667b5a93e037fd
      </p>

      <p>
        Account #18: 0xdd2fd4581271e230360230f9337d5c0430bf44c0 (10000 ETH)<br>
        Private Key: 0xde9be858da4a475276426320d5e9262ecfc3ba460bfac56360bfa6c4c28b4ee0
      </p>

      <p>
        Account #19: 0x8626f6940e2eb28930efb4cef49b2d1f2c9c1199 (10000 ETH)<br>
        Private Key: 0xdf57089febbacf7ba0bc227dafbffa9fc08a93fdc68e1e42411a14efcf23656e
      </p>
    </div>

  </div>
</body>

</html>
