<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8">
    <script
      src="https://cdn.ethers.io/lib/ethers-5.2.umd.min.js"
      type="application/javascript"
    ></script>
    <link
      rel="stylesheet"
      href="https://kokecacao.me/static/./css/BrowneUI.css"
    />
    <script>
      const contractAddress = "<%= contractAddress %>";

      // prettier-ignore
      const contractJson = <%- contractJson %>;

      const abi = contractJson.abi;
      let provider;
      let address = 0;

      let loaded = false;

      function displayableHex(a) {
        let str = `${a}`;
        return `${str.substring(0, 4)}...${str.slice(-4)}`;
      }

      function time() {
        const now = new Date();
        const utcMilllisecondsSinceEpoch = now.getTime();
        const utcSecondsSinceEpoch = Math.round(utcMilllisecondsSinceEpoch / 1000);
        return utcSecondsSinceEpoch;
      }

      const cyrb53 = function(str, seed = 0) {
        let h1 = 0xdeadbeef ^ seed, h2 = 0x41c6ce57 ^ seed;
        for (let i = 0, ch; i < str.length; i++) {
            ch = str.charCodeAt(i);
            h1 = Math.imul(h1 ^ ch, 2654435761);
            h2 = Math.imul(h2 ^ ch, 1597334677);
        }
        h1 = Math.imul(h1 ^ (h1>>>16), 2246822507) ^ Math.imul(h2 ^ (h2>>>13), 3266489909);
        h2 = Math.imul(h2 ^ (h2>>>16), 2246822507) ^ Math.imul(h1 ^ (h1>>>13), 3266489909);
        return 4294967296 * (2097151 & h2) + (h1>>>0);
      };

      function reloadInventory() {
        setTimeout(() => {
          const inventory = document.getElementById('inventory');
          inventory.innerHTML = '';
          CryptoEggsGetEgg(address, () => {
            console.log("Loading Inventory Success");
          }, () => {});
        }, 1000 * 1); // wait for 1 second
      }

      function CryptoEggsOnLoad() {
        // wait for ethers.js to load
        if (typeof ethers === "undefined") {
          console.log("ethers.js undefined, keep trying...");
          setTimeout(onLoad2CH3, 10);
          return;
        }
        if (loaded) return;
        loaded = true;
        console.log("ethers.js loaded");
        // load Web3
        if (provider === undefined) provider = new ethers.providers.Web3Provider(window.ethereum, "any");
        // load account
        CyrptoEggsConnectAccount(() => {
          CryptoEggsGetEgg(address, () => {
            console.log("Loading Inventory Success");
          }, () => {});
        }, () => console.log("cannot load account"));
      }

      function claimEgg() {
        return CryptoEggsClaimEgg(() => {
          console.log("claim success");
          reloadInventory();
        }, () => {
          console.log("claim failed");
        })
      }

      function CryptoEggsClaimEgg(successCallback, failureCallback) {
        // Connect to Metamask
        (provider.send("eth_requestAccounts", [])).then((accounts) => {
          console.log(`Accounts: ${accounts}; Selecting the first account...`);
          (provider.getBalance(accounts[0])).then((balance) => {
            console.log(`Accounts: ${accounts[0]}; Balance: ${balance}`);
            if (balance == 0) {
              console.log("You need to have balance to use this extension.")
              // TODO: play mode
              failureCallback();
              return;
            }

            // Initialize Contract
            const contract = new ethers.Contract(contractAddress, abi, provider.getSigner());
            contract.claimEgg().then((transaction) => {
              console.log(`Transaction sent, waiting for confirmation...`);
              transaction.wait(1).then((confirm) => {
                console.log(confirm);
                console.log(`Transaction Confirmed!`);
              });
              successCallback();
            }, (errno) => {
              console.log(`Error ${errno.code}: ${errno.message}`);
              failureCallback();
            });

          });

        }, (errno) => {
          console.log(`Error ${errno.code}: ${errno.message}`);
          failureCallback();
        });
      }


      function CryptoEggsKillEgg(id, successCallback, failureCallback) {
        // Connect to Metamask
        (provider.send("eth_requestAccounts", [])).then((accounts) => {
          console.log(`Accounts: ${accounts}; Selecting the first account...`);
          (provider.getBalance(accounts[0])).then((balance) => {
            console.log(`Accounts: ${accounts[0]}; Balance: ${balance}`);
            if (balance == 0) {
              console.log("You need to have balance to use this extension.")
              // TODO: play mode
              failureCallback();
              return;
            }

            // Initialize Contract
            const contract = new ethers.Contract(contractAddress, abi, provider.getSigner());
            contract.kill(id).then((transaction) => {
              console.log(`Transaction sent, waiting for confirmation...`);
              transaction.wait(1).then((confirm) => {
                console.log(confirm);
                console.log(`Transaction Confirmed!`);
              });
              successCallback();
            }, (errno) => {
              console.log(`Error ${errno.code}: ${errno.message}`);
              failureCallback();
            });

          });

        }, (errno) => {
          console.log(`Error ${errno.code}: ${errno.message}`);
          failureCallback();
        });
      }


      function CryptoEggsFreezeEgg(id, successCallback, failureCallback) {
        // Connect to Metamask
        (provider.send("eth_requestAccounts", [])).then((accounts) => {
          console.log(`Accounts: ${accounts}; Selecting the first account...`);
          (provider.getBalance(accounts[0])).then((balance) => {
            console.log(`Accounts: ${accounts[0]}; Balance: ${balance}`);
            if (balance == 0) {
              console.log("You need to have balance to use this extension.")
              // TODO: play mode
              failureCallback();
              return;
            }

            // Initialize Contract
            const contract = new ethers.Contract(contractAddress, abi, provider.getSigner());
            contract.freeze(id).then((transaction) => {
              console.log(`Transaction sent, waiting for confirmation...`);
              transaction.wait(1).then((confirm) => {
                console.log(confirm);
                console.log(`Transaction Confirmed!`);
              });
              successCallback();
            }, (errno) => {
              console.log(`Error ${errno.code}: ${errno.message}`);
              failureCallback();
            });

          });

        }, (errno) => {
          console.log(`Error ${errno.code}: ${errno.message}`);
          failureCallback();
        });
      }

      function kill(id) {
        CryptoEggsKillEgg(id, () => {
          console.log(`You killed your egg: ${id}`);
          reloadInventory();
        }, () => {
          console.log(`You failed to kill your egg: ${id}`);
        });
      }

      function freeze(id) {
        CryptoEggsFreezeEgg(id, () => {
          console.log(`You freezed your egg: ${id}`);
          reloadInventory();
        }, () => {
          console.log(`You failed to freeze your egg: ${id}`);
        });
      }

      function CyrptoEggsConnectAccount(successCallback, failureCallback) {
        (provider.send("eth_requestAccounts", [])).then((accounts) => {
          console.log(`Accounts: ${accounts}; Selecting the first account ${accounts[0]}`);
          address = accounts[0];
          successCallback();
        }, (errno) => {
          console.log(`Error ${errno.code}: ${errno.message}`);
          failureCallback();
        });
      }

      function CryptoEggsGetEgg(address, successCallback, failureCallback) {
        if (address == 0) {
          console.log(`Invalid Address = 0x00`);
          failureCallback();
          return;
        }
        console.log(`Loading Your Inventory for ${address}`);
          const contract = new ethers.Contract(contractAddress, abi, provider);
          contract.ownerCryptomonCount(address).then((eggCount) => {
            console.log(`You have ${eggCount} many cryptomons`);
            if (eggCount > 0) {
              let list = document.getElementById('inventoryhead'); 
              list.setAttribute('style', 'visibility: visible;')
              for (let i = 0; i < eggCount; i++) {
                contract.ownerToCryptomons(address, i).then((eggId) => {
                  contract.eggToEggInstance(eggId).then((eggInstance) => {
                  console.log(`Adding Egg to Inventory: ${eggInstance.id}`);
                  console.log(eggInstance);
                  let adult = eggInstance.frozenTime > 0 ? (eggInstance.hatchTime < eggInstance.frozenTime) : (time() > eggInstance.hatchTime);
                  let type = adult ? 'adult' : 'egg';
                  addRow(eggInstance.id, eggInstance.name, type, eggInstance.frozenTime > 0, !eggInstance.alive, getImg(type, `${eggInstance.id}`), '', `./lineage/${eggId}`, `./breed/${eggId}`, `kill("${eggId}")`, `freeze("${eggId}")`);
                  })
                }, (errno) => {
                  console.log(`Error ${errno.code}: ${errno.message}`);
                  failureCallback();
                });
              }
            } else {
              let list = document.getElementById('inventoryhead'); 
              list.setAttribute('style', 'visibility: hidden;')
            }
            successCallback();
          }, (errno) => {
              console.log(`Error ${errno.code}: ${errno.message}`);
              failureCallback();
            }
          );
      }

      function addRow(dna, name, type, frozen, dead, imgUrl, dnaUrl, lineageUrl, breedUrl, killFunction, freezeFunction) {
        let list = document.getElementById('inventory'); 
        list.appendChild(getRow(displayableHex(dna), name, type, frozen, dead, imgUrl, dnaUrl, lineageUrl, breedUrl, killFunction, freezeFunction));
      }

      function dnaToId(dna, mod=256) {
        return cyrb53(dna) % mod;
      }

      function getEggImg(dna) {
        return `${window.location.origin}/static/eggs/${dnaToId(dna)}.png`;
      }

      function getMonImg(dna) {
        return `${window.location.origin}/static/mons/${dnaToId(dna)}.png`;
      }

      function getImg(type, dna) {
        if (type == 'egg') return getEggImg(dna);
        else return getMonImg(dna);
      }

      function getRow(dna, name, type, frozen, dead, imgUrl, dnaUrl, lineageUrl, breedUrl, killFunction, freezeFunction) {
        let tr = document.createElement("tr");

        let td_img = document.createElement("td");
          let a_img = document.createElement('a');
          a_img.setAttribute('href', "");
            let td_a_img = document.createElement('img');
            td_a_img.src = imgUrl;
            td_a_img.title = type;
            a_img.appendChild(td_a_img);
          td_img.appendChild(a_img);

        let td_dna = document.createElement("td");
        let a_dna = document.createElement('a');
        a_dna.setAttribute('href', dnaUrl);
        a_dna.appendChild(document.createTextNode(dna));
        td_dna.appendChild(a_dna);

        let td_name = document.createElement("td");
        td_name.innerHTML = `${type}${frozen ? '(❄)' : (dead ? '(💀)' : '')}`;

        let td_lineage = document.createElement("td");
        let a_lineage = document.createElement('a');
        a_lineage.setAttribute('class', "btn");
        a_lineage.setAttribute('href', lineageUrl);
        a_lineage.appendChild(document.createTextNode('View lineage'));
        td_lineage.appendChild(a_lineage);

        let td_breed = document.createElement("td");
        let a_breed = document.createElement('a');
        a_breed.setAttribute('class', "btn");
        a_breed.setAttribute('href', breedUrl);
        a_breed.appendChild(document.createTextNode('Breed'));
        td_breed.appendChild(a_breed);

        let td_kill = document.createElement("td");
        let a_kill = document.createElement('a');
        a_kill.setAttribute('class', "btn");
        a_kill.setAttribute('onclick', killFunction);
        a_kill.appendChild(document.createTextNode('Kill'));
        td_kill.appendChild(a_kill);

        let td_freeze = document.createElement("td");
        let a_freeze = document.createElement('a');
        a_freeze.setAttribute('class', "btn");
        a_freeze.setAttribute('onclick', freezeFunction);
        a_freeze.appendChild(document.createTextNode('Freeze'));
        td_freeze.appendChild(a_freeze);

        tr.appendChild(td_img);
        tr.appendChild(td_dna);
        tr.appendChild(td_name);
        tr.appendChild(td_lineage);
        tr.appendChild(td_breed);
        tr.appendChild(td_kill);
        tr.appendChild(td_freeze);
        return tr;
      }

      // function addArrayToList(root, array) {
      //   let ul = document.createElement('ul');
      //   let li;
      //   root.appendChild(ul);
      //   array.forEach((item) => {
      //     if (Array.isArray(item)) {
      //       addArrayToList(li, item);
      //       return;
      //     };
      //     li = document.createElement('li');
      //     li.appendChild(document.createTextNode(item));
      //     ul.appendChild(li);
      //   });
      // }
      CryptoEggsOnLoad();
    </script>
  </head>

  <body onload="">
    <div class="container">
      <div align="center">
        <h1><%= title %></h1>
        <p>
          Breed your own Cryptomon — [2021/03/18, First-Release]
          <span class="typing">_</span>
        </p>
      </div>

      <div align="center">
        <!-- <img
          id="display"
          style="opacity: 0.1"
          src="./static/cryptoegg.png"
          width="256"
          height="256"
          style="-ms-interpolation-mode: nearest-neighbor; image-rendering: crisp-edges; image-rendering: pixelated;"
        /> -->
        <!-- <a class="btn" onclick="metamask = false;">setDebugMode</a> -->
      </div>

      <h3>
        You encountered the following eggs as you walk into the forest. Pick one
        of them!
      </h3>
      <div class="floatbox" style="justify-content: center">
        <section class="one-third">
          <div align="center">
            <a onclick="claimEgg()"
              ><img
                id="display"
                style="opacity: 1; cursor: pointer"
                src="./static/cryptoegg.png"
            /></a>
            <p>Some description</p>
          </div>
        </section>
        <section class="one-third">
          <div align="center">
            <a onclick="claimEgg()"
              ><img
                id="display"
                style="opacity: 1; cursor: pointer"
                src="./static/cryptoegg.png"
            /></a>
            <p>Some description</p>
          </div>
        </section>
        <section class="one-third">
          <div align="center">
            <a onclick="claimEgg()"
              ><img
                id="display"
                style="opacity: 1; cursor: pointer"
                src="./static/cryptoegg.png"
            /></a>
            <p>Some description</p>
          </div>
        </section>
      </div>

      <h4>
        After one minute, they will hatch. And you can breed them.
      </h4>
      <div align="center">
        <a class="btn" href="https://kokecacao.me/page/Post/CryptoEggs.md"
          >Here is a tutorial on how to play this game</a>
      </div>
      <br>

      <table style="width: 100%">
        <thead id="inventoryhead">
          <tr>
            <th>Inventory</th>
            <th>DNA</th>
            <th>Type</th>
            <th>Lineage</th>
            <th>Breed</th>
            <th>Kill</th>
            <th>Freeze</th>
          </tr>
        </thead>
        <tbody id="inventory">
        </tbody>
      </table>
    </div>
  </body>
</html>
